{"mappings":"iiBACAA,EAAA,S,iCCDA,IAAAC,EAAAD,EAAA,S,0BACME,EAAO,CACXC,mBAAoBC,SAASC,cAAc,yBAEvCC,EAAY,IAAI,EAAAC,EAAAC,S,SAWAC,EAAwBC,G,OAAxBC,EAAuBC,MAAAC,KAAAC,U,UAAvBH,I,OAAAA,EAAfI,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,EAAuCR,G,IAEpCS,EACAC,E,2FADed,EAAUe,c,OAAzBF,EAAMG,EAAAC,KACNH,EAAUV,EAAIU,QAAQI,MAAM,EAAG,GAEVJ,EAAQK,KAAI,SAAAC,G,kBA8BnC,IAAMC,EAAOR,EAAOS,MAAK,SAAAC,G,OAAMA,EAAGC,KAAOC,EAAQC,E,IACjDC,EAAWC,KAAKP,EAAKQ,K,EA3BrBC,GAMEV,EARFW,cAQEX,EAPFY,eAOEZ,EANFU,cAGAG,GAGEb,EALFc,aAKEd,EAJFe,WAIEf,EAHFa,YAEAG,GACEhB,EAFFiB,UAEEjB,EADFgB,UAoBF,IAJA,IAAMX,EAAUrB,EAAIU,QAAQ,GAAGuB,UAG3BV,EAAa,GACRW,EAAI,EAAGA,EAAIb,EAAQc,OAAQD,GAAK,EAACE,EAAAF,GAO/C,IAAMG,EAAO3B,EAAQ,GACf4B,EAAQD,EAAKT,eAGbW,EAAWF,EAAKV,cACpB,mCAAsDa,OAAnBH,EAAKV,eACxC,oDACIc,EAhCD,SAAuBC,GACrBA,EAAOA,GAAQ,IAEf,IAAMC,EAAU,IAAIC,KAAKlB,GACzB,OACEiB,EAAQE,UACRH,EACAC,EAAQG,WACRJ,EACAC,EAAQI,a,CAuBEC,CAAc,KAC3BC,EAAcjD,EAAIU,QAAQ,GAAGoB,aAC7BoB,EAAYlD,EAAIU,QAAQ,GAAGqB,WAC3BoB,EAAUC,KAAKC,UAAUrD,EAAIU,QAAQ,GAAGU,IACxCkC,EAAU/B,EAAWT,MAAM,EAAG,GAAG4B,KAAK,MAmBvClD,EAAKC,mBAAmB8D,UAAY,uIAEwBf,OAAlBD,EAAS,WAGoBC,OAHXF,EAAM,kMAMkDE,OAH7CF,EAAM,4MAIsCE,OADCC,EAAW,yIACiDD,OAA7DS,EAAY,mDAGPT,OAHwDU,EAAU,kLAI1EV,OADQX,EAAW,sIAKlGW,OAJ+Ec,EAAQ,mHAI9Ed,OAATR,EAAS,mGAMhDwB,UAAY9D,SAASC,cAAc,qBACnC6D,UAAUC,iBAAiB,SAiB3B,WACC,IAAMC,EAAM,GACNC,EAAQC,aAAaC,QAAQ,gBACnCC,QAAQC,IAAIJ,GACE,OAAVA,GAAmBA,EAAMK,SAASC,GAMtB,GAARN,GAAkBD,EAAIM,SAASC,EAAU5B,QAChDmB,UAAUU,UAAW,IANvBR,EAAIlC,KAAKyC,GACTL,aAAaO,QAAQ,eAAgBf,KAAKC,UAAUK,IACpDF,UAAUU,UAAW,E,IAvBrB,IAEOD,EAAY,CACjBvC,aAAce,EACdrB,GAAI+B,EACJb,MAAOA,EACPT,aACAC,aAAcmB,EACdmB,YAAa7B,EACbR,WAAWmB,EACXjB,UAAWZ,EACXW,aAmBF,WACE,IACE,IAAMqC,EAAST,aAAaC,QAhCpB,gBAiCFS,EAA6BlB,KAAKmB,MAAMF,GAC9C,GAAgB,OAAZC,EACF,OAEFA,EAAQvD,KAAI,SAAAyD,GACNA,EAAIpD,KAAOA,KACb0C,QAAQC,IAAIS,EAAIpD,IAChBoC,UAAUU,UAAW,E,IAMnB,MAAOO,GACPX,QAAQW,MAAMA,E,EAGlBC,E,8GAlJuCxE,MAAAC,KAAAC,U,CAHpCR,EAAU+E,WALhBC,KAAK7E,GACL8E,OAAM,SAAAC,G,OAAMhB,QAAQC,IAAIe,EAAGC,Q,IAC9BhF,I","sources":["src/index.js","src/js/upcoming.js"],"sourcesContent":["// import weeklyTrends from './js/weekly-trends';\nimport header from './js/header';\nimport mobileMenu from './js/mobile-menu';\nimport themeToggle from './js/themeToggle';\nimport { getDayMovieTrend } from './js/hero';\nimport { fetchUpcomingMovie, renderUpcomingMovieCard } from './js/upcoming';\nimport createWeekTrendsCatalog from './js/createTrends';\nimport scrollUp from './js/scroll-up';\nimport modalTeam from './js/modal-team';\n\nimport modalMovie from './js/modal_movie';\n","import Api from './api';\nconst refs = {\n  galleryOfNewMovies: document.querySelector('.upcoming__container'),\n};\nconst newMovies = new Api();\n\nfetchUpcomingMovie()\n  .then(renderUpcomingMovieCard)\n  .catch(er => console.log(er.message));\nrenderUpcomingMovieCard();\n\nexport function fetchUpcomingMovie() {\n  return newMovies.upcoming();\n}\n\nexport async function renderUpcomingMovieCard(res) {\n  try {\n    const genres = await newMovies.fetchGenres();\n    const results = res.results.slice(0, 1);\n\n    const createUpcomingCard = results.map(result => {\n      const {\n        backdrop_path,\n        original_title,\n        release_date,\n        vote_average,\n        vote_count,\n        popularity,\n        genre_ids,\n        overview,\n      } = result;\n      function getFormatDate(join) {\n        join = join || ' '; // разделитель по дефолту\n\n        const release = new Date(release_date);\n        return (\n          release.getDate() +\n          join +\n          release.getMonth() +\n          join +\n          release.getFullYear()\n        );\n      }\n      // console.log(getFormatDate('.'));\n\n      const idGenre = res.results[0].genre_ids;\n\n\n      let nameGenres = [];\n      for (let i = 0; i < idGenre.length; i += 1) {\n        const item = genres.find(el => el.id === idGenre[i]);\n        nameGenres.push(item.name);\n      }\n\n \n \n const data = results[0];\n const title = data.original_title;\n const key = title;\n//  const title = res.results[0].original_title;\n const imageUrl = data.backdrop_path\n ? `https://image.tmdb.org/t/p/w500/${data.backdrop_path}`\n : 'https://via.placeholder.com/395x574?text=No+Image'; \n const formatDate = getFormatDate('.');\n const voteAverage = res.results[0].vote_average;\n const voteCount = res.results[0].vote_count;\n const movieId = JSON.stringify(res.results[0].id);\n const genreUp = nameGenres.slice(0, 2).join(', ');\n\n\n//       const data = results[0];\n//       const title = data.original_title;\n//       const key = title;\n//       //  const title = res.results[0].original_title;\n//       const imageUrl = data.backdrop_path\n//         ? `https://image.tmdb.org/t/p/w500/${data.backdrop_path}`\n//         : 'https://via.placeholder.com/395x574?text=No+Image';\n//       const posterUrl = data.poster_path\n//         ? `https://image.tmdb.org/t/p/w500/${data.poster_path}`\n//         : 'https://via.placeholder.com/395x574?text=No+Image';\n//       const formatDate = getFormatDate('.');\n//       const voteAverage = res.results[0].vote_average;\n//       const voteCount = res.results[0].vote_count;\n//       const movieId = res.results[0].id;\n//       const genreUp = nameGenres.slice(0, 2).join(', ');\n\n      refs.galleryOfNewMovies.innerHTML = ` <h2 class=\"upcoming__title\">Upcoming this month</h2>\n<div class=\"upcoming__info\"> \n<img src=\"https://image.tmdb.org/t/p/original/${imageUrl}\" alt=\"${title}\"  loading=\"lazy\" class=\"upcoming__img\" />\n<div class=\"upcoming__info-btn\">\n<div class=\"upcoming__info-layout\">\n<h3 class =\"upcoming__movie-title\"><span class=\"upcoming__item-font-title\">${title}</span></h3>\n<div class=\"upcoming__list-tablet\">\n<ul class=\"upcoming__list\">\n<li class =\"upcoming__item\"><span class=\"upcoming__item-font-date\">Release date</span><span class=\"upcoming__item-data\">${formatDate}</span></li>\n<li class =\"upcoming__item\"><span class=\"upcoming__item-font-vote\">Vote/Votes </span><span class=\"upcoming__item-vote\">${voteAverage}</span>  /  <span class=\"upcoming__item-votes\">${voteCount}</span></li>\n</ul>\n<ul class=\"upcoming__list\">\n<li class =\"upcoming__item\"><span class=\"upcoming__item-font-popularity\">Popularity </span><span class=\"upcoming__item-pop\">${popularity}</span></li>\n<li class =\"upcoming__item\"><span class=\"upcoming__item-font-genre\">Genre </span><span class=\"upcoming__item-genre\">${genreUp}</span></li>\n</ul>\n</div>\n<p class =\"upcoming__movie-about\">About</p>\n<p class=\"upcoming__item-font-about\">${overview}</p>\n</div>\n<button type=\"button\" class=\"upcoming__button\">Remind me</button>\n</div>\n</div>`;\n\nremindBtn = document.querySelector('.upcoming__button')\nremindBtn.addEventListener('click', addLS);\nconst KEY = 'LibraryMovie';\n\n const movieItem = {\n  release_date: formatDate,\n  id: movieId,\n  title: title,\n  popularity,\n  vote_average: voteAverage,\n  poster_path: imageUrl,\n  vote_count:voteCount,\n  genre_ids: idGenre,\n  overview,\n};\n\n\n\nfunction addLS() { \n const arr = [];\n const saved = localStorage.getItem('LibraryMovie');\n console.log(saved);\n if( saved === null || !saved.includes(movieItem)){\narr.push(movieItem);\nlocalStorage.setItem('LibraryMovie', JSON.stringify(arr));\nremindBtn.disabled = true;\n\n }\n else if(saved ==! null && arr.includes(movieItem.data)){\n  remindBtn.disabled = true;\n }\n}\nfunction ls() {\n  try {\n    const itemLs = localStorage.getItem(KEY);\n    const parceLS = null ? undefined : JSON.parse(itemLs);\n    if (parceLS === null) {\n      return;\n    }\n    parceLS.map(elm => {\n      if (elm.id === id) {\n        console.log(elm.id);\n        remindBtn.disabled = true;\n         }\n\n\n \n          });\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      ls();\n    });\n  } catch{error => (console.log(error.message))};\n  };"],"names":["parcelRequire","$bpxeT","$4c6aab06649ec8ef$var$refs","galleryOfNewMovies","document","querySelector","$4c6aab06649ec8ef$var$newMovies","$b7ONl","default","$4c6aab06649ec8ef$export$b31ccb6f873ec7de","res","$4c6aab06649ec8ef$var$_renderUpcomingMovieCard","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","genres","results","fetchGenres","_ctx","sent","slice","map","result","item","find","el","id","idGenre","i","nameGenres","push","name","release_date","backdrop_path","original_title","popularity","vote_average","vote_count","overview","genre_ids","i1","length","_loop","data","title","imageUrl","concat","formatDate","join","release","Date","getDate","getMonth","getFullYear","getFormatDate","voteAverage","voteCount","movieId","JSON","stringify","genreUp","innerHTML","remindBtn","addEventListener","arr","saved","localStorage","getItem","console","log","includes","movieItem","disabled","setItem","poster_path","itemLs","parceLS","parse","elm","error","ls","upcoming","then","catch","er","message"],"version":3,"file":"index.1d9c4fa2.js.map"}