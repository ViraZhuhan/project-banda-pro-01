{"mappings":"AAGA,MAAMA,EAAkB,ICaT,MAQbC,kBACE,IACE,MAAMC,QAAiBC,MAnBZ,0FAqBX,aADmBD,EAASE,M,CAE5B,MAAOC,GACP,MAAM,IAAIC,MAAM,8BAAgCD,E,EAIpDJ,mBACE,IACE,MAAMC,QAAiBC,MA5BX,2FA8BZ,aADmBD,EAASE,M,CAE5B,MAAOC,GACP,MAAM,IAAIC,MAAM,8BAAgCD,E,EAIpDJ,iBACE,IACE,MAAMC,QAAiBC,MAhCZ,sFAkCX,aADmBD,EAASE,M,CAE5B,MAAOC,GACP,MAAM,IAAIC,MAAM,8BAAgCD,E,EAIpDJ,oBACE,IACE,MAAMC,QAAiBC,MA7CT,2FA+Cd,aADmBD,EAASE,QAChBG,M,CACZ,MAAOF,GACP,MAAM,IAAIC,MAAM,+BAAiCD,E,EA3CrDG,cACEC,KAAKC,KAAO,OACZD,KAAKE,KAAO,EACZF,KAAKG,MAAQ,QACbH,KAAKI,QAAU,S,GDjBbC,EEFK,CACHC,OAAQC,SAASC,iBAAiB,WAClCC,QAASF,SAASG,cAAc,mBFYxC,SAASC,EAAWL,GAClB,MAAMM,EAAeN,EAAOI,cAAc,mBACpCG,EAAcP,EAAOI,cAAc,kBACrBJ,EAAOE,iBAAiB,iBAGhCM,SAAQC,IAClBA,EAAKC,iBAAiB,SAAS,KAC7BH,EAAYI,UAAYF,EAAKG,MAC7BC,EAAqBP,EAAcC,EAAY,GAC/C,IAEJM,EAAqBP,EAAcC,E,CAGrC,SAASM,EAAqBP,EAAcC,GAC1C,MAAMO,EAAoBP,EAAYI,UAAY,KAClDL,EAAaS,MAAMC,MAAQ,GAAGF,I,EAGhC5B,iBACE,IACE,MACM+B,SADahC,EAAgBiC,cACfC,QAAQC,MAAM,EAAG,GAE/B5B,QAAeP,EAAgBoC,cAE/BC,EAAiBL,EAAOM,KAAIC,IAChC,MAAMC,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,EAAYC,aAAEA,EAAYC,UAAEA,GACtDL,EAEIM,EAAcH,EAEdI,EAAU,IAAIC,KAAKJ,GAAcK,cAUvC,MAAO,mGAJUR,EACb,mCAAmCA,IACnC,6DAKiDC,wFAEvBA,wFAbVlC,EACjB0C,QAAOrC,GAASgC,EAAUM,SAAStC,EAAMuC,MACzCb,KAAI1B,GAASA,EAAMF,OAcbyB,MAAM,EAAG,GACTiB,KAAK,WAAWN,+sBAaYD,0HAOpC,IAGH/B,EAAKI,QAAQQ,UAAYW,EAAee,KAAK,IApFjD,WACE,GAAItC,EAAKC,OAAOsC,OAAS,EACvB,IAAK,IAAIC,EAAQ,EAAGA,EAAQxC,EAAKC,OAAOsC,OAAQC,IAEhDlC,EADsBN,EAAKC,OAAOuC,G,CAkFlCC,E,CACA,MAAOlD,GACPmD,QAAQnD,MAAMA,E,EAIlBoD","sources":["src/js/weekly-trends.js","src/js/api.js","src/js/get-refs.js"],"sourcesContent":["import Api from './api';\nimport getRefs from './get-refs';\n\nconst weeklyTrendsApi = new Api();\nconst refs = getRefs();\n\n\nfunction initRatings() {\n  if (refs.rating.length > 0) {\n    for (let index = 0; index < refs.rating.length; index++) {\n    const ratingElement = refs.rating[index];\n    initRating(ratingElement);\n  }\n  }\n}\n\nfunction initRating(rating) {\n  const ratingActive = rating.querySelector('.rating__active');\n  const ratingValue = rating.querySelector('.rating__value');\n  const ratingItems = rating.querySelectorAll('.rating__item');\n\n\n  ratingItems.forEach(item => {\n    item.addEventListener('click', () => {\n      ratingValue.innerHTML = item.value;\n      setRatingActiveWidth(ratingActive, ratingValue);\n    });\n  });\n  setRatingActiveWidth(ratingActive, ratingValue);\n}\n\nfunction setRatingActiveWidth(ratingActive, ratingValue) {\n  const ratingActiveWidth = ratingValue.innerHTML / 0.025;\n  ratingActive.style.width = `${ratingActiveWidth}%`;\n}\n\nasync function renderWeeklyTrends() {\n  try {\n    const data = await weeklyTrendsApi.weekTrends();\n    const movies = data.results.slice(0, 3);\n\n    const genres = await weeklyTrendsApi.fetchGenres();\n\n    const moviesElements = movies.map(movie => {\n      const { poster_path, title, vote_average, release_date, genre_ids } =\n        movie;\n\n      const voteAverage = vote_average;\n\n      const release = new Date(release_date).getFullYear();\n\n      const movieGenres = genres\n        .filter(genre => genre_ids.includes(genre.id))\n        .map(genre => genre.name);\n\n      const imageUrl = poster_path\n        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n        : 'https://via.placeholder.com/395x574?text=No+Image';\n\n      return `\n        <li class=\"article__item\">\n        <article>\n        <img class=\"article__img\" src=\"${imageUrl}\" alt=\"${title}\" width=\"395\" >\n          <div class=\"details\">\n            <p class=\"title__txt\">${title}</p>\n            <div class=\"wraper__details\">\n            <p class=\"movieGenres\">${movieGenres\n              .slice(0, 2)\n              .join(', ')} | ${release}</p>\n            \n            <div class=\"rating\">\n              <div class=\"rating__body\">\n                <div class=\"rating__active\"></div>\n                <div class=\"rating__items\">\n                  <input type=\"radio\" class=\"rating__item\" value=\"1\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"2\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"3\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"4\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"5\" name=\"rating\" />\n                </div>\n              </div>\n              <div class=\"rating__value\">${voteAverage}</div>\n            </div>\n            </div>\n          </div>\n        </article>\n          \n        </li>\n      `;\n    });\n\n    refs.wrapper.innerHTML = moviesElements.join('');\n    initRatings();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nrenderWeeklyTrends();\n","const MOVIE_URL = `https://api.themoviedb.org/3/`;\nconst API_KEY = '225e339996bc91260b33199c383c8881';\n\n// as looking by id\nconst example = `${MOVIE_URL}movie/550?api_key=${API_KEY}`;\n\n// all - movie - tv - person | week - day |\nconst dayRoute = `${MOVIE_URL}trending/all/day?api_key=${API_KEY}`;\nconst weekRoute = `${MOVIE_URL}trending/all/week?api_key=${API_KEY}`;\n\n// genres\nconst genresRoute = `${MOVIE_URL}/genre/movie/list?api_key=${API_KEY}`;\n\n//\nconst upcoming = `${MOVIE_URL}all/upcoming?api_key=${API_KEY}`;\n\nexport default class Api {\n  constructor() {\n    this.name = 'name';\n    this.year = 0;\n    this.genre = 'genre';\n    this.country = 'country';\n  }\n\n  async dayTrends() {\n    try {\n      const response = await fetch(dayRoute);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching movie data: ' + error);\n    }\n  }\n\n  async weekTrends() {\n    try {\n      const response = await fetch(weekRoute);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching movie data: ' + error);\n    }\n  }\n\n  async upcoming() {\n    try {\n      const response = await fetch(upcoming);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching movie data: ' + error);\n    }\n  }\n\n  async fetchGenres() {\n    try {\n      const response = await fetch(genresRoute);\n      const data = await response.json();\n      return data.genres;\n    } catch (error) {\n      throw new Error('Error fetching genres data: ' + error);\n    }\n  }\n\n}\n","\nexport default function getRefs () {\n    return {\n        rating: document.querySelectorAll('.rating'),\n        wrapper: document.querySelector('.article__list'),\n      };\n}"],"names":["$d395fb91404b7f70$var$weeklyTrendsApi","async","response","fetch","json","error","Error","genres","constructor","this","name","year","genre","country","$d395fb91404b7f70$var$refs","rating","document","querySelectorAll","wrapper","querySelector","$d395fb91404b7f70$var$initRating","ratingActive","ratingValue","forEach","item","addEventListener","innerHTML","value","$d395fb91404b7f70$var$setRatingActiveWidth","ratingActiveWidth","style","width","movies","weekTrends","results","slice","fetchGenres","moviesElements","map","movie","poster_path","title","vote_average","release_date","genre_ids","voteAverage","release","Date","getFullYear","filter","includes","id","join","length","index","$d395fb91404b7f70$var$initRatings","console","$d395fb91404b7f70$var$renderWeeklyTrends"],"version":3,"file":"index.e4d0aeff.js.map"}